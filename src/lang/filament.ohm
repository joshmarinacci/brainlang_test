Filament {
  Exp = Block |  LowOp

  LowOp = AsExp

  AsExp
   = AsExp "as" unit --convert
   | BoolExp

  BoolExp
   = BoolExp boolop AddExp --bool
   | AddExp
  boolop = "mod" | "and" | "or" | "<=" | ">=" | "<>" | "<" | ">" | "="

  AddExp
   = AddExp addop MulExp --add
   | MulExp
  addop = "+" | "-"

  MulExp
   = MulExp mulop PipeOp --mul
   | PipeOp
  mulop = "**" | "*" | "/"

  PipeOp
   = PipeOp ">>" HighOp -- right
   | HighOp "<<" PipeOp -- left
   | HighOp

  HighOp
    = GroupExp
    | FundefExp
    | FuncallExp
    | UnExp
    | List | bool | ident
    | unitnumber
    | number
    | string

  Block = "{" Exp* "}"

  FuncallExp = ident "(" ListOf<Arg,","> ")"
  Arg
    = ident ":" Exp --named
    | Exp           --indexed

  FundefExp = "def" ident "(" ListOf<DefArg,","> ")" Block
  DefArg = ident ":" ("?" | Exp)

  List = "[" ListOf<Exp,","> "]"

  UnExp = unop Exp
  unop  = "not" | "-" | "!"


  GroupExp = "(" Exp ")"

  under = "_"
  ident  (an identifier)
    = letter (letter | digit | under)*

  number  (a number)
    = ("0x" | "0X") hexdigunder+  -- hex
    | underdigit* "." underdigit+ -- fract
    | underdigit+                 -- whole
  underdigit = digit | under
  hexdigunder = "a".."f"|"A".."F"|"0".."9" | "_"
  unit = "%" | letter+
  unitnumber = number unit

  q = "\'"
  qq = "\""

  string (text string)
    = q (~q any)* q
    | qq (~qq any)* qq

  eol = "\n"
  comment = "//" (~"\n" any)* (eol|end)
  bool = "true" | "false"

}